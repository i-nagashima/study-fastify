このドキュメントには、Fastify を使用する際の推奨事項が記載されています。

/* Use A Reverse Proxy
------------------------------------------------------------ */
Node.jsは、標準ライブラリの中に使いやすいWebサーバが含まれているフレームワークをいち早く採用しています。
従来、PHPやPythonなどの言語では、その言語に対応したWebサーバーを用意するか、
その言語で動作するCGIゲートウェイを設置する必要がありました。
しかし、Node.jsでは、HTTPリクエストを直接処理するアプリケーションを書くことができます。
そのため、複数のドメインに対するリクエストを処理し、複数のポート（HTTP と HTTPS）をリッスンし、
これらのアプリケーションをインターネットに直接公開してリクエストを処理するようなアプリケーショ ンを書きたくなることでしょう。

1.Fastifyチームは、これはアンチパターンであり、非常に悪い習慣であると考えています。
2.水平方向のスケーラビリティを妨げます。

なぜリバースプロキシを使うべきなのかについては、
「Node.jsが製品化されているのに、なぜリバースプロキシを使う必要があるのか」を参照してください。
https://web.archive.org/web/20190821102906/https://medium.com/intrinsic/why-should-i-use-a-reverse-proxy-if-node-js-is-production-ready-5a079408b2ca

具体的な例として、次のような状況を考えてみましょう。
1.負荷に対応するために複数のインスタンスが必要である。
2.TLSの終端処理が必要である。
3.アプリケーションは、HTTPリクエストをHTTPSにリダイレクトする必要があります。
4.複数のドメインに対応する必要があります。
5.静的なリソース（例：JPEGファイル）を提供する必要があります。

リバースプロキシのソリューションは数多くありますが、AWSやGCPなど、
環境によって使用するソリューションが異なる場合があります。
上記を踏まえると、これらの要件を解決するためにHAProxyを使用することができます。

/* Kubernetes
------------------------------------------------------------ */

