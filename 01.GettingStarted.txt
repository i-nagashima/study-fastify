/* Getting Started
------------------------------------------------------------ */
こんにちは。Fastifyをチェックアウトしていただき、ありがとうございます。
このドキュメントは、フレームワークとその機能についてやさしく紹介することを目的としています。
例やドキュメントの他の部分へのリンクがある初歩的な序章です。
さあ、始めましょう

/* Install
------------------------------------------------------------ */
Install with npm:
npm i fastify --save

Install with yarn:
yarn add fastify

/* Your first server
------------------------------------------------------------ */
最初のサーバーを書いてみましょう。
@ ---------------------------------------------------------- @
// Require the framework and instantiate it
const fastify = require('fastify')({
  logger: true
})

// Declare a route
fastify.get('/', function (request, reply) {
  reply.send({ hello: 'world' })
})

// Run the server!
fastify.listen(3000, function (err, address) {
  if (err) {
    fastify.log.error(err)
    process.exit(1)
  }
  fastify.log.info(`server listening on ${address}`)
})

async/awaitを使うのが好きですか？Fastifyは即座にそれをサポートします。
(ファイル記述子やメモリリークを避けるため、make-promises-safeの使用もお勧めします)。

const fastify = require('fastify')({
  logger: true
})

fastify.get('/', async (request, reply) => {
  return { hello: 'world' }
})

const start = async () => {
  try {
    await fastify.listen(3000)
  } catch (err) {
    fastify.log.error(err)
    process.exit(1)
  }
}
start()
@ ---------------------------------------------------------- @

すごい、簡単ですね。
残念ながら、複雑なアプリケーションを書くには、この例よりもかなり多くのコードが必要になります。
新しいアプリケーションを構築するときの典型的な問題は、
複数のファイル、非同期ブートストラップ、コードのアーキテクチャをどのように扱うかということです。
Fastifyは、上記のすべての問題を解決するのに役立つ簡単なプラットフォームを提供しています。

Note
上記の例や、このドキュメントの以降の例では、デフォルトでlocalhost 127.0.0.1インターフェースのみをリッスンしています。
利用可能なすべてのIPv4インターフェースをリッスンするには、この例を0.0.0.0をリッスンするように変更する必要があります。

@ ---------------------------------------------------------- @
fastify.listen(3000, '0.0.0.0', function (err, address) {
  if (err) {
    fastify.log.error(err)
    process.exit(1)
  }
  fastify.log.info(`server listening on ${address}`)
})
@ ---------------------------------------------------------- @

同様に、IPv6によるローカル接続のみを受け付ける場合は、「:1」を指定します。
また、 ::を指定すると、すべてのIPv6アドレスでの接続を受け付け、OSがサポートしている場合は、
すべてのIPv4アドレスでの接続も受け付けます。

Docker（または他のタイプの）コンテナにデプロイする場合、
0.0.0.0 または :: を使用するのが、アプリケーションを公開する最も簡単な方法です。

/* Your first plugin
------------------------------------------------------------ */
すべてがオブジェクトであるJavaScriptのように、Fastifyではすべてがプラグインです。
それを掘り下げる前に、どのように動作するかを見てみましょう。
基本的なサーバを宣言しましょう。ただし、エントリーポイント内でルートを宣言する代わりに、
外部ファイルで宣言します（Routesのドキュメントをチェックしてください）。

@ ---------------------------------------------------------- @
const fastify = require('fastify')({
  logger: true
})

fastify.register(require('./our-first-route'))

fastify.listen(3000, function (err, address) {
  if (err) {
    fastify.log.error(err)
    process.exit(1)
  }
  fastify.log.info(`server listening on ${address}`)
})

// our-first-route.js

async function routes (fastify, options) {
  fastify.get('/', async (request, reply) => {
    return { hello: 'world' }
  })
}

module.exports = routes
@ ---------------------------------------------------------- @

この例では、Fastify フレームワークのコアである register API を使用しました。
これは、ルート、プラグインなどを追加する唯一の方法です。

このガイドの冒頭で、Fastifyはアプリケーションの非同期ブートストラップを支援する基盤を提供すると述べました。
なぜこれが重要なのでしょうか？データストレージを処理するために、データベース接続が必要なシナリオを考えてみましょう。
サーバーが接続を受け入れる前に、データベース接続が利用可能である必要があります。この問題にどのように対処すればよいのでしょうか？
典型的な解決策は、複雑なコールバック、またはプロミスを使用することです。
フレームワーク API と他のライブラリやアプリケーションコードが混在するようなシステムです。
Fastifyは、最小限の労力でこれを内部的に処理します!

上の例をデータベース接続で書き換えてみましょう。

まず、fastify-pluginとfastify-mongodbをインストールします。
npm i --save fastify-plugin fastify-mongodb

server.js
@ ---------------------------------------------------------- @
const fastify = require('fastify')({
  logger: true
})

fastify.register(require('./our-db-connector'))
fastify.register(require('./our-first-route'))

fastify.listen(3000, function (err, address) {
  if (err) {
    fastify.log.error(err)
    process.exit(1)
  }
  fastify.log.info(`server listening on ${address}`)
})
@ ---------------------------------------------------------- @

our-db-connector.js
@ ---------------------------------------------------------- @
const fastifyPlugin = require('fastify-plugin')

async function dbConnector (fastify, options) {
  fastify.register(require('fastify-mongodb'), {
    url: 'mongodb://localhost:27017/test_database'
  })
}

// Wrapping a plugin function with fastify-plugin exposes the decorators    
// and hooks, declared inside the plugin to the parent scope.
module.exports = fastifyPlugin(dbConnector)
@ ---------------------------------------------------------- @

our-first-route.js
@ ---------------------------------------------------------- @
async function routes (fastify, options) {
  const collection = fastify.mongo.db.collection('test_collection')

  fastify.get('/', async (request, reply) => {
    return { hello: 'world' }
  })

  fastify.get('/animals', async (request, reply) => {
    const result = await collection.find().toArray()
    if (result.length === 0) {
      throw new Error('No documents found')
    }
    return result
  })

  fastify.get('/animals/:animal', async (request, reply) => {
    const result = await collection.findOne({ animal: request.params.animal })
    if (!result) {
      throw new Error('Invalid value')
    }
    return result
  })
}

module.exports = routes
@ ---------------------------------------------------------- @

いやあ、早かったですね。
新しいコンセプトを導入したので、ここで行ったことを振り返ってみましょう。
ご覧の通り、データベースコネクタとルートの登録の両方にregisterを使用しています。
これはFastifyの最も優れた機能の一つで、プラグインを宣言したのと同じ順番でロードし、
現在のプラグインがロードされた後にのみ次のプラグインをロードします。
このようにして、最初のプラグインでデータベースコネクタを登録し、
2番目のプラグインでそれを使用することができます（プラグインのスコープを処理する方法を理解するにはここを読んでください）。
プラグインのロードは、fastify.listen()、fastify.inject()、fastify.ready()のいずれかを呼び出したときに始まります。

また、デコレーション API を使用して、Fastify の名前空間にカスタム オブジェクトを追加し、
あらゆる場所で使用できるようにしています。
コードの再利用を容易にし、コードやロジックの重複を減らすために、このAPIの使用が推奨されています。

Fastifyプラグインがどのように動作するか、新しいプラグインをどのように開発するか、
そしてFastify API全体を使用してアプリケーションを非同期にブートストラップする複雑さに対処する方法の詳細については、
プラグインのヒッチハイカーズガイドをお読みください。

/* Loading order of your plugins
------------------------------------------------------------ */
アプリケーションの一貫した予測可能な動作を保証するために、常に以下のようにコードをロードすることを強くお勧めします。

└── plugins (from the Fastify ecosystem)
└── your plugins (your custom plugins)
└── decorators
└── hooks
└── your services

このようにして、現在のスコープで宣言されているすべてのプロパティに常にアクセスすることができます。
前述したように、Fastifyは強固なカプセル化モデルを提供しており、
アプリケーションを単一で独立したサービスとして構築するのに役立ちます。
もし、ルートのサブセットに対してのみプラグインを登録したい場合は、上記の構造を再現するだけです。

└── plugins (from the Fastify ecosystem)
└── your plugins (your custom plugins)
└── decorators
└── hooks
└── your services
    │
    └──  service A
    │     └── plugins (from the Fastify ecosystem)
    │     └── your plugins (your custom plugins)
    │     └── decorators
    │     └── hooks
    │     └── your services
    │
    └──  service B
          └── plugins (from the Fastify ecosystem)
          └── your plugins (your custom plugins)
          └── decorators
          └── hooks
          └── your services

/* Validate your data
------------------------------------------------------------ */
データ検証は非常に重要で、フレームワークのコアコンセプトです。
受信するリクエストを検証するために、FastifyはJSONスキーマを使用します。
(JTDスキーマはゆるやかにサポートされていますが、まずjsonShorthandを無効にする必要があります)

ここでは、ルートの検証を行う例を見てみましょう。
@ ---------------------------------------------------------- @
const opts = {
  schema: {
    body: {
      type: 'object',
      properties: {
        someKey: { type: 'string' },
        someOtherKey: { type: 'number' }
      }
    }
  }
}

fastify.post('/', opts, async (request, reply) => {
  return { hello: 'world' }
})
@ ---------------------------------------------------------- @

この例では、ルートにオプションオブジェクトを渡す方法を示しています。
オプションオブジェクトは、ルート、ボディ、クエリストリング、パラム、およびヘッダーのすべてのスキーマを含むスキーマキーを受け取ります。
詳しくは「検証とシリアライズ」をお読みください。

/* Serialize your data
------------------------------------------------------------ */
FastifyはJSONをファーストクラスでサポートしています。JSONボディのパースとJSON出力のシリアライズには非常に最適化されています。
JSONシリアライゼーションを高速化するために（確かに遅いです！）、次の例に示すように、スキーマオプションのレスポンスキーを使用します。
@ ---------------------------------------------------------- @
const opts = {
  schema: {
    response: {
      200: {
        type: 'object',
        properties: {
          hello: { type: 'string' }
        }
      }
    }
  }
}

fastify.get('/', opts, async (request, reply) => {
  return { hello: 'world' }
})
@ ---------------------------------------------------------- @

図のようにスキーマを指定することで、シリアライズを2～3倍高速化することができます。
また、Fastify は応答スキーマに存在するデータのみをシリアライズするので、潜在的な機密データの漏洩を防ぐことができます。
詳しくは「検証とシリアライズ」をお読みください。

/* Extend your server
------------------------------------------------------------ */
Fastifyは非常に拡張性が高く、ミニマルに作られています。
私たちは、素のフレームワークこそが素晴らしいアプリケーションを実現するために必要なものだと考えています。
言い換えれば、Fastifyは「バッテリー込み」のフレームワークではなく、素晴らしいエコシステムに依存しているのです。

/* Test your server
------------------------------------------------------------ */
Fastifyはテストフレームワークを提供していませんが、Fastifyの機能とアーキテクチャを使用してテストを書く方法を推奨しています。
詳しくはテスティングドキュメントをお読みください。

/* Run your server from CLI
------------------------------------------------------------ */
Fastifyにはfastify-cliによるCLI統合もあります。
First, install fastify-cli:
npm i fastify-cli

また、-gでグローバルにインストールすることもできます。
そして、package.jsonに以下の行を追加します。
{
  "scripts": {
    "start": "fastify start server.js"
  }
}

そして、サーバーファイルを作成します。
// server.js
'use strict'

module.exports = async function (fastify, opts) {
  fastify.get('/', async (request, reply) => {
    return { hello: 'world' }
  })
}

でサーバーを起動してください。
npm start
